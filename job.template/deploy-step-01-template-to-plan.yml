---
- name: Copy template to plan folder with timestamp and push to new branch
  hosts: localhost
  connection: local
  gather_facts: yes
  
  vars:
    # Template file to copy (can be passed as extra var)
    template_file: "{{ template_to_copy | default('template_debug_message.yml') }}"
    # Generate timestamp in YYYY-MM-DD_HH-MM-SS format
    timestamp: "{{ ansible_date_time.year }}-{{ ansible_date_time.month.zfill(2) }}-{{ ansible_date_time.day.zfill(2) }}_{{ ansible_date_time.hour.zfill(2) }}-{{ ansible_date_time.minute.zfill(2) }}-{{ ansible_date_time.second.zfill(2) }}"
    # Branch name for the template
    template_branch: "template-{{ timestamp }}"
    # Source and destination paths
    # source_path: "job.template/{{ template_file }}"
    source_path: "{{ template_file }}"
    plan_folder: "plan"
    dest_filename: "{{ timestamp }}.yml"
    github_repo_auto_url: "{{ lookup('env', 'GITHUB_REPO_AUTO') }}"
    cloned_repo_dir_name: "tmp_github_repo_auto"
    cloned_repo_path: "{{ playbook_dir }}/{{ cloned_repo_dir_name }}"
    
  tasks:
    - name: Gather current date and time facts
      ansible.builtin.setup:
        gather_subset:
          - date_time
      delegate_to: localhost
      run_once: true

    - name: Display timestamp being used
      debug:
        msg: "Using timestamp: {{ timestamp }}"

    - name: Check if template file exists
      ansible.builtin.stat:
        path: "{{ source_path }}"
      register: template_stat

    - name: Fail if template file doesn't exist
      ansible.builtin.fail:
        msg: "Template file {{ source_path }} does not exist"
      when: not template_stat.stat.exists

    - name: Ensure target directory for new repo exists
      ansible.builtin.file:
        path: "{{ cloned_repo_path }}"
        state: directory
        mode: '0755'

    - name: Clone the new Git repository
      ansible.builtin.command:
        cmd: "git clone https://oauth2:{{ lookup('env', 'GITHUB_TOKEN') }}@{{ github_repo_auto_url | regex_replace('^https?://', '') }} {{ cloned_repo_dir_name }}"
        chdir: "{{ playbook_dir }}/" # Clone into the parent directory
      args:
        creates: "{{ cloned_repo_path }}" # Only run if the directory doesn't exist
      register: git_clone_result
      changed_when: git_clone_result.rc == 0
      # when: not cloned_repo_path | ansible.builtin.stat(get_md5=False).stat.exists

    - name: Display clone result
      debug:
        msg: "Clone result: {{ git_clone_result }}"
      when: git_clone_result is defined and git_clone_result.rc == 0

    - name: Create plan directory inside cloned repo if it doesn't exist
      ansible.builtin.file:
        path: "{{ cloned_repo_path }}/{{ plan_folder }}"
        state: directory
        mode: '0755'

    - name: Copy template file to plan folder within cloned repo with timestamp
      ansible.builtin.copy:
        src: "{{ source_path }}"
        dest: "{{ cloned_repo_path }}/{{ plan_folder }}/{{ dest_filename }}"
        mode: '0644'
      register: copy_result

    - name: Display copied file location in cloned repo
      debug:
        msg: "Template copied to: {{ cloned_repo_path }}/{{ plan_folder }}/{{ dest_filename }}"

    - name: Display github token
      debug:
        msg: "github token: {{ lookup('env', 'GITHUB_TOKEN') }}"

    - name: Display files under cloned_repo_path for verification
      ansible.builtin.command:
        cmd: "ls -laR {{ cloned_repo_path }}"
      register: files_in_cloned_repo
      changed_when: false # This command doesn't change state

    - name: Show contents of cloned repo
      debug:
        msg: "{{ files_in_cloned_repo.stdout_lines }}"
        
    - name: Check current git status in cloned repo
      ansible.builtin.command:
        cmd: git status --porcelain
        chdir: "{{ cloned_repo_path }}"
      register: git_status
      changed_when: false

    - name: Create new template branch in cloned repo
      ansible.builtin.command:
        cmd: git checkout -b {{ template_branch }}
        chdir: "{{ cloned_repo_path }}"
      register: branch_create
      changed_when: true

    - name: Add copied file to git in cloned repo
      ansible.builtin.command:
        cmd: git add {{ plan_folder }}/{{ dest_filename }}
        chdir: "{{ cloned_repo_path }}"
      register: git_add
      changed_when: true

    - name: Commit the template file in cloned repo
      ansible.builtin.command:
        cmd: git commit -m "Add template {{ template_file }} to plan folder with timestamp {{ timestamp }}"
        chdir: "{{ cloned_repo_path }}"
      register: git_commit
      changed_when: true

    # In an Ansible Automation Platform (AAP) environment, Git repository URL and credentials
    # are typically managed by the AAP project and its associated SCM credentials.
    # The 'git push origin' command will use the 'origin' remote configured by AAP
    # when the project is cloned into the execution environment, and authentication
    # will be handled by the SCM credentials linked to the job template.
    # No explicit 'git remote set-url' or credential injection is needed within the playbook.
    - name: Push new template branch to remote from cloned repo
      ansible.builtin.command:
        cmd: git push origin {{ template_branch }}
        chdir: "{{ cloned_repo_path }}"
      register: git_push
      changed_when: true

    - name: Return to main branch in cloned repo
      ansible.builtin.command:
        cmd: git checkout main
        chdir: "{{ cloned_repo_path }}"
      register: git_checkout_main
      changed_when: true

    - name: Display success message (updated for cloned repo)
      debug:
        msg: |
          Successfully completed template deployment step 1:
          - Template file: {{ template_file }}
          - Cloned repo path: {{ cloned_repo_path }}
          - Copied to: {{ cloned_repo_path }}/{{ plan_folder }}/{{ dest_filename }}
          - Branch created: {{ template_branch }}
          - Branch pushed to remote
          - Returned to main branch

    - name: Set facts for next workflow step (updated for cloned repo)
      ansible.builtin.set_stats:
        data:
          template_branch: "{{ template_branch }}"
          plan_file: "{{ cloned_repo_path }}/{{ plan_folder }}/{{ dest_filename }}"
          timestamp: "{{ timestamp }}"