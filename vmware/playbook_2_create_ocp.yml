# =================================================================
# playbook_2_create_batch2.yml - 剧本2: 创建第二批虚拟机
# =================================================================
---
- name: "Stage 2: Provision Batch 2 VMs"
  hosts: localhost
  gather_facts: no
  vars_files:
    - vars.yml

  tasks:
    # - name: Get all folders
    #   community.vmware.vmware_folder_info:
    #     hostname: '{{ vcenter_hostname }}'
    #     username: '{{ vcenter_username }}'
    #     password: '{{ vcenter_password }}'
    #     validate_certs: no
    #     datacenter: '{{ vcenter_datacenter }}'
    #   register: v

    # - debug:
    #     msg: "{{ v.folder_info }}"

    - name: "Create Batch 2 VM: {{ item.name }}"
      community.vmware.vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ vcenter_datacenter }}"
        cluster: "{{ vcenter_cluster }}"
        # 如果 vm_folder 变量为空, `default(omit)` 会让 Ansible 忽略此参数。
        folder: "{{ vm_folder | default(omit) }}"
        name: "{{ item.name }}"
        state: poweredoff
        guest_id: "{{ guest_id }}"
        hardware:
          num_cpus: "{{ item.num_cpus }}"
          memory_mb: "{{ item.memory_mb }}"
          # nested_virt: true
        disk:
          - size_gb: "{{ item.disk1_gb }}"
            type: thin
            datastore: "{{ vcenter_datastore }}"
        networks:
          - name: "{{ vm_network }}"
            device_type: vmxnet3
            # **已修改**: 从变量中设置 MAC 地址，如果未定义则忽略。
            mac: "{{ item.mac | default(omit) }}"
        cdrom:
          - type: iso
            iso_path: "{{ ocp_iso_path }}"
            state: present
            controller_number: 0
            unit_number: 0
      loop: "{{ ocp_vms }}"

    # --- 步骤 2: 使用 vmware_guest 重新配置 VM 以启用 disk.EnableUUID ---
    - name: "Step 2: Reconfigure VM {{ item.name }} to enable disk UUID and apply the advanced settings"
      community.vmware.vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ vcenter_datacenter }}"
        folder: "{{ vm_folder | default(omit) }}"
        name: "{{ item.name }}"
        state: present
        hardware:
          nested_virt: true
        # 在硬件配置中启用 disk UUID
        advanced_settings:
          - key: 'disk.EnableUUID'
            value: 'TRUE'
      loop: "{{ ocp_vms }}"
      register: uuid_config_result

    # --- 步骤 2.1: 确保 VM 处于关机状态 ---
    - name: "Step 2.1: Ensure VM {{ item.name }} is powered off"
      community.vmware.vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ vcenter_datacenter }}"
        folder: "{{ vm_folder | default(omit) }}"
        name: "{{ item.name }}"
        state: poweredoff
      loop: "{{ ocp_vms }}"
      register: final_vm_state # 将最终状态（包含MAC地址）注册到变量中

    # --- (已修正) 步骤 3: 提取 MAC 地址到一个干净的列表中 ---
    - name: "Step 3: Collate MAC addresses into a clean list"
      ansible.builtin.set_fact:
        vm_mac_info: "{{ vm_mac_info | default([]) + [ 'VM ''%s'' has MAC address: %s' | format(item.item.name, item.instance.hw_eth0.macaddress) ] }}"
      loop: "{{ final_vm_state.results }}"
      when:
        - item.instance is defined
        - item.instance.hw_eth0 is defined
        - item.instance.hw_eth0.macaddress is defined

    # --- 步骤 4: 只输出干净的列表信息 ---
    - name: "Step 4: Display the collected MAC addresses"
      ansible.builtin.debug:
        var: vm_mac_info
      when: vm_mac_info is defined